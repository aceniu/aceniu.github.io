<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>艾斯牛 Blog</title>
  <icon>https://www.gravatar.com/avatar/c64997c9d7912f88b4e2d0181ae88958</icon>
  <subtitle>一生志愿只要平凡快乐</subtitle>
  <link href="https://aceniu.github.io/atom.xml" rel="self"/>
  
  <link href="https://aceniu.github.io/"/>
  <updated>2023-02-11T18:56:38.981Z</updated>
  <id>https://aceniu.github.io/</id>
  
  <author>
    <name>aceniu</name>
    <email>123354319@qq.com</email>
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Zabbix 学习笔记</title>
    <link href="https://aceniu.github.io/posts/c1031b26.html"/>
    <id>https://aceniu.github.io/posts/c1031b26.html</id>
    <published>2023-02-12T00:44:21.000Z</published>
    <updated>2023-02-11T18:56:38.981Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id=""><a href="#" class="headerlink" title=""></a><p class='p cyan huge center'>Zabbix简介<sup>(1)</sup></p></h1><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><p class='p blue large left'>Zabbix 概述<sup>(1.1)</sup></p></h2><p>Zabbix是由Alexei Vladishev开发的一种网络监视、管理系统，基于Server-Client架构。可用于监视各种网络服务、服务器和网络机器等状态。</p><p>使用各种Database-end如MySQL, PostgresQL, sQLite, Oracle或 IBM DB2储存资料。Server端基于C语言、Web管理端frontend则是基于PHP所制作的。</p><p>Zabbix可以使用多种方式监视。可以只使用Simple Check 不需要安装Client端，亦可基于SMTP或HTTP…各种协议定制监视。</p><p>在客户端如UNIX,Windows中安装Zabbix Agent 之后，可监视 CPU Load、网络使用状况、硬盘容量等各种状态。而就算没有安装Agent 在监视对象中，Zabbix也可以经由SNMP、TCP、ICMP、利用IPMI、SSH、 telnet 对目标进行监视。</p><p>Zabbbix自带的ltem足够满足普通小公司的监控需求，对于大公司也可以设定自定义的ltem，自动生成报表，也有API可以和其他系统集成。</p><h2 id="-2"><a href="#-2" class="headerlink" title=""></a><p class='p blue large left'>使用 Zabbix 的优势<sup>(1.2)</sup></p></h2><ul><li><p>开源,无软件成本投入</p></li><li><p>Server 对设备性能要求低</p></li><li><p>支持设备多,自带多种监控模板</p></li><li><p>支持分布式集中管理,有自动发现功能,可以实现自动化监控</p></li><li><p>开放式接口,扩展性强,插件编写容易</p></li><li><p>当监控的 item 比较多服务器队列比较大时可以采用主动状态,被监控客户端主动 从server 端去下载需要监控的 item 然后取数据上传到 server 端。 这种方式对服务器的负载比较小。</p></li><li><p>Api 的支持,方便与其他系统结合</p></li><li><p>zabbix可以满足理想化的监控系统需求</p></li></ul>]]></content>
    
    
    <summary type="html">Zabbix 是一个基于 WEB 界面的提供分布式系统监视以及网络监视功能的企业级的开源解决方案。Zabbix 能监视各种网络参数,保证服务器系统的安全运营;并提供灵活的通知机制以让系统管理员快速定位、解决存在的各种问题。</summary>
    
    
    
    <category term="运维" scheme="https://aceniu.github.io/categories/%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="编程" scheme="https://aceniu.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="zabbix" scheme="https://aceniu.github.io/tags/zabbix/"/>
    
    <category term="运维" scheme="https://aceniu.github.io/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>Git 学习笔记</title>
    <link href="https://aceniu.github.io/posts/3c3cdb74.html"/>
    <id>https://aceniu.github.io/posts/3c3cdb74.html</id>
    <published>2023-02-10T16:35:00.000Z</published>
    <updated>2023-02-11T18:56:38.981Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer" /><h1 id=""><a href="#" class="headerlink" title=""></a><p class='p cyan huge center'>Git简介<sup>(1)</sup></p></h1><div class="tip home"><p><strong>Git官网</strong>：<a href="https://git-scm.com/">https://git-scm.com/</a></p></div><ul><li><p><strong>概述</strong></p><p>Git 是一个开源的<strong><span style="color:red;">分布式</span></strong>版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。</p></li></ul><ul><li><p><strong>何为版本控制</strong></p><p>版本控制是一种或记录文件内容变化，以便将来查阅特定版本修订情况的系统。</p><p>版本控制其实最重要的是可以记录文件修改历史记录，从而让用户能够查看历史版本，方便版本切换。</p></li></ul><ul><li><p><strong>优点</strong></p><ol><li><p>解决了集中式版本控制系统的缺陷，服务器断网的情况下也可以进行开发（因为版本控制是在本地进行的）</p></li><li><p>每个客户端保存的也都是整个完整的项目（包含历史记录，更加安全）</p></li></ol></li></ul><ul><li><p><strong>Git 发展史</strong></p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/image-20230104185414310.png" alt="image-20230104185414310"></p></li></ul><ul><li><p><strong>工作机制</strong></p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/image-20230104190134428.png" alt="image-20230104190134428"></p></li></ul><ul><li><p><strong>代码托管中心</strong></p><p>代码托管中心是基于网络服务器的远程代码仓库，一般我们简单称为<strong><font style="color:red;">远程库</font></strong></p><ul><li><p><strong>局域网</strong></p><p><code>GitLab</code></p></li><li><p><strong>互联网</strong></p><p><code>Github</code></p><p><code>Gitee</code> 码云</p></li></ul></li></ul><hr><h1 id="-1"><a href="#-1" class="headerlink" title=""></a><p class='p cyan huge center'>Git安装<sup>(2)</sup></p></h1><h2 id="Windows-安装-2-1"><a href="#Windows-安装-2-1" class="headerlink" title="Windows 安装(2.1)"></a>Windows 安装<sup>(2.1)</sup></h2><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/image-20230104191136130.png" alt="image-20230104191136130"></p><p>其它菜单没有特殊需求基本都是默认。</p><hr><h1 id="-2"><a href="#-2" class="headerlink" title=""></a><p class='p cyan huge center'>Git命令<sup>(3)</sup></p></h1><h2 id="常用命令-3-1"><a href="#常用命令-3-1" class="headerlink" title="常用命令(3.1)"></a>常用命令<sup>(3.1)</sup></h2><div class="table-container"><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git config —global user.name 用户名</td><td>设置用户签名</td></tr><tr><td>git config —global user.email 邮箱</td><td>设置用户邮箱</td></tr><tr><td>git init</td><td><span style="color:red;">初始化本地库</span></td></tr><tr><td>git status</td><td><span style="color:red;">查看本地库状态</span></td></tr><tr><td>git add 文件名</td><td><span style="color:red;">添加到暂存区</span></td></tr><tr><td>git commit -m “日志信息” 文件名</td><td><span style="color:red;">提交到本地库</span></td></tr><tr><td>git reflog</td><td><span style="color:red;">查看历史记录</span></td></tr><tr><td>git reset —hard 版本号</td><td><span style="color:red;">版本穿梭</span></td></tr></tbody></table></div><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/1a74ce2a5d7ecaed8b3fe9b52b720eec3.jpg" alt="1a74ce2a5d7ecaed8b3fe9b52b720eec3"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line">git init                                                  # 初始化本地git仓库（创建新仓库）</span><br><span class="line">git config --global user.name &quot;xxx&quot;                       # 配置用户名</span><br><span class="line">git config --global user.email &quot;xxx@xxx.com&quot;              # 配置邮件</span><br><span class="line">git config --global color.ui true                         # git status等命令自动着色</span><br><span class="line">git config --global color.status auto</span><br><span class="line">git config --global color.diff auto</span><br><span class="line">git config --global color.branch auto</span><br><span class="line">git config --global color.interactive auto</span><br><span class="line">git config --global --unset http.proxy                    # remove  proxy configuration on git</span><br><span class="line">git clone git+ssh://git@192.168.53.168/VT.git             # clone远程仓库</span><br><span class="line">git status                                                # 查看当前版本状态（是否修改）</span><br><span class="line">git add xyz                                               # 添加xyz文件至index</span><br><span class="line">git add .                                                 # 增加当前子目录下所有更改过的文件至index</span><br><span class="line">git commit -m &#x27;xxx&#x27;                                       # 提交</span><br><span class="line">git commit --amend -m &#x27;xxx&#x27;                               # 合并上一次提交（用于反复修改）</span><br><span class="line">git commit -am &#x27;xxx&#x27;                                      # 将add和commit合为一步</span><br><span class="line">git rm xxx                                                # 删除index中的文件</span><br><span class="line">git rm -r *                                               # 递归删除</span><br><span class="line">git log                                                   # 显示提交日志</span><br><span class="line">git log -1                                                # 显示1行日志 -n为n行</span><br><span class="line">git log -5</span><br><span class="line">git log --stat                                            # 显示提交日志及相关变动文件</span><br><span class="line">git log -p -m</span><br><span class="line">git show dfb02e6e4f2f7b573337763e5c0013802e392818         # 显示某个提交的详细内容</span><br><span class="line">git show dfb02                                            # 可只用commitid的前几位</span><br><span class="line">git show HEAD                                             # 显示HEAD提交日志</span><br><span class="line">git show HEAD^                                            # 显示HEAD的父（上一个版本）的提交日志 ^^为上两个版本 ^5为上5个版本</span><br><span class="line">git tag                                                   # 显示已存在的tag</span><br><span class="line">git tag -a v2.0 -m &#x27;xxx&#x27;                                  # 增加v2.0的tag</span><br><span class="line">git show v2.0                                             # 显示v2.0的日志及详细内容</span><br><span class="line">git log v2.0                                              # 显示v2.0的日志</span><br><span class="line">git diff                                                  # 显示所有未添加至index的变更</span><br><span class="line">git diff --cached                                         # 显示所有已添加index但还未commit的变更</span><br><span class="line">git diff HEAD^                                            # 比较与上一个版本的差异</span><br><span class="line">git diff HEAD -- ./lib                                    # 比较与HEAD版本lib目录的差异</span><br><span class="line">git diff origin/master..master                            # 比较远程分支master上有本地分支master上没有的</span><br><span class="line">git diff origin/master..master --stat                     # 只显示差异的文件，不显示具体内容</span><br><span class="line">git remote add origin git+ssh://git@192.168.53.168/VT.git # 增加远程定义（用于push/pull/fetch）</span><br><span class="line">git branch                                                # 显示本地分支</span><br><span class="line">git branch --contains 50089                               # 显示包含提交50089的分支</span><br><span class="line">git branch -a                                             # 显示所有分支</span><br><span class="line">git branch -r                                             # 显示所有原创分支</span><br><span class="line">git branch --merged                                       # 显示所有已合并到当前分支的分支</span><br><span class="line">git branch --no-merged                                    # 显示所有未合并到当前分支的分支</span><br><span class="line">git branch -m master master_copy                          # 本地分支改名</span><br><span class="line">git checkout -b master_copy                               # 从当前分支创建新分支master_copy并检出</span><br><span class="line">git checkout -b master master_copy                        # 上面的完整版</span><br><span class="line">git checkout features/performance                         # 检出已存在的features/performance分支</span><br><span class="line">git checkout --track hotfixes/BJVEP933                    # 检出远程分支hotfixes/BJVEP933并创建本地跟踪分支</span><br><span class="line">git checkout v2.0                                         # 检出版本v2.0</span><br><span class="line">git checkout -b devel origin/develop                      # 从远程分支develop创建新本地分支devel并检出</span><br><span class="line">git checkout -- README                                    # 检出head版本的README文件（可用于修改错误回退）</span><br><span class="line">git merge origin/master                                   # 合并远程master分支至当前分支</span><br><span class="line">git cherry-pick ff44785404a8e                             # 合并提交ff44785404a8e的修改</span><br><span class="line">git push origin master                                    # 将当前分支push到远程master分支</span><br><span class="line">git push origin :hotfixes/BJVEP933                        # 删除远程仓库的hotfixes/BJVEP933分支</span><br><span class="line">git push --tags                                           # 把所有tag推送到远程仓库</span><br><span class="line">git fetch                                                 # 获取所有远程分支（不更新本地分支，另需merge）</span><br><span class="line">git fetch --prune                                         # 获取所有原创分支并清除服务器上已删掉的分支</span><br><span class="line">git pull origin master                                    # 获取远程分支master并merge到当前分支</span><br><span class="line">git mv README README2                                     # 重命名文件README为README2</span><br><span class="line">git reset --hard HEAD                                     # 将当前版本重置为HEAD（通常用于merge失败回退）</span><br><span class="line">git rebase</span><br><span class="line">git branch -d hotfixes/BJVEP933                           # 删除分支hotfixes/BJVEP933（本分支修改已合并到其他分支）</span><br><span class="line">git branch -D hotfixes/BJVEP933                           # 强制删除分支hotfixes/BJVEP933</span><br><span class="line">git ls-files                                              # 列出git index包含的文件</span><br><span class="line">git show-branch                                           # 图示当前分支历史</span><br><span class="line">git show-branch --all                                     # 图示所有分支历史</span><br><span class="line">git whatchanged                                           # 显示提交历史对应的文件修改</span><br><span class="line">git revert dfb02e6e4f2f7b573337763e5c0013802e392818       # 撤销提交dfb02e6e4f2f7b573337763e5c0013802e392818</span><br><span class="line">git ls-tree HEAD                                          # 内部命令：显示某个git对象</span><br><span class="line">git rev-parse v2.0                                        # 内部命令：显示某个ref对于的SHA1 HASH</span><br><span class="line">git reflog                                                # 显示所有提交，包括孤立节点</span><br><span class="line">git show HEAD@&#123;5&#125;</span><br><span class="line">git show master@&#123;yesterday&#125;                               # 显示master分支昨天的状态</span><br><span class="line">git log --pretty=format:&#x27;%h %s&#x27; --graph                   # 图示提交日志</span><br><span class="line">git show HEAD~3</span><br><span class="line">git show -s --pretty=raw 2be7fcb476</span><br><span class="line">git stash                                                 # 暂存当前修改，将所有至为HEAD状态</span><br><span class="line">git stash list                                            # 查看所有暂存</span><br><span class="line">git stash show -p stash@&#123;0&#125;                               # 参考第一次暂存</span><br><span class="line">git stash apply stash@&#123;0&#125;                                 # 应用第一次暂存</span><br><span class="line">git grep &quot;delete from&quot;                                    # 文件中搜索文本“delete from”</span><br><span class="line">git grep -e &#x27;#define&#x27; --and -e SORT_DIRENT</span><br><span class="line">git gc</span><br><span class="line">git fsck</span><br></pre></td></tr></table></figure><h2 id="设置用户签名-3-2"><a href="#设置用户签名-3-2" class="headerlink" title="设置用户签名(3.2)"></a>设置用户签名<sup>(3.2)</sup></h2><p><strong>命令：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name 用户名</span><br><span class="line">git config --global user.email 邮箱</span><br><span class="line">git config -l # 查看所有配置</span><br></pre></td></tr></table></figure><p><strong><font style="color:red;">Git首次安装必须设置用户签名，否则后续无法提交代码</font></strong>。签名的作用是区分不同操作者身份。用户的签名信息在每一个版本的提交信息中能够看到，以此确认本次提交是谁做的。</p><p><font style="color:red;background:yellow;">※注意：</font>这里设置用户签名和将来登录 Github （或其他代码托管中心）的账号没有任何关系。（Windows下如果想手动修改可以在<code>C:\Users\Niu‘s XX Pro 13</code> 下的<code>.gitconfig</code>文件中修改。）</p><h2 id="初始化本地库-3-3"><a href="#初始化本地库-3-3" class="headerlink" title="初始化本地库(3.3)"></a>初始化本地库<sup>(3.3)</sup></h2><p><strong>命令：</strong>在需要的文件夹中输入命令，初始化工作区</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><hr><h1 id="-3"><a href="#-3" class="headerlink" title=""></a><p class='p cyan huge center'>分支操作<sup>(4)</sup></p></h1><p>在版本控制过程中，同时推进多个任务，为每个任务，我们就可以创建每个任务的单独分支。使用分支意味着程序员可以把自己的工作从开发主线上分离开来，开发自己分支的时候，不会影响主线分支的运行。（分支的底层也是指针的运用）</p><p><strong>分支的好处在于可以同时并行推进多个功能开发，提高开发效率</strong>。</p><h2 id="分支的操作-4-1"><a href="#分支的操作-4-1" class="headerlink" title="分支的操作(4.1)"></a>分支的操作<sup>(4.1)</sup></h2><div class="table-container"><table><thead><tr><th>命令</th><th>作用</th></tr></thead><tbody><tr><td>git branch 分支名</td><td>创建分支</td></tr><tr><td>git branch -v</td><td>查看分支</td></tr><tr><td>git checkout 分支名</td><td>切换分支</td></tr><tr><td>git merge 分支名</td><td>把<u>指定的分支</u>合并到<u>当前分支</u>上</td></tr><tr><td>git branch -d 分支名</td><td>删除本地分支</td></tr></tbody></table></div><h2 id="分支冲突-4-2"><a href="#分支冲突-4-2" class="headerlink" title="分支冲突(4.2)"></a>分支冲突<sup>(4.2)</sup></h2><p>合并分支时，两个分支在<font style="color:red;">同一个文件的同一个位置</font>有两套完全不同的修改。Git无法替我们决定使用哪一个。必须<font style="color:red;">人为决定</font>新代码内容。</p><p>解决办法：</p><ol><li><p>本地有两个分支：master，beta</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到master分支</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git checkout master</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将beta分支合并到当前分支master上</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge beta</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>在合并分支时冲突提示</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git merge beta</span></span><br><span class="line">Auto-merging README.md</span><br><span class="line">CONFLICT (content): Merge conflict in README.md</span><br><span class="line">Automatic merge failed; fix conflicts and then commit the result.</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>手动打开冲突的文档进行修改（并去掉多余的符号）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">当前分支区的冲突数据</span><br><span class="line">=======</span><br><span class="line">指定分支区的冲突数据</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt;&gt;&gt;&gt;&gt; beta</span></span><br></pre></td></tr></table></figure></li></ol><ol><li><p>在执行 add 和 commit 操作完成冲突合并</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git add .</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git commit -m <span class="string">&quot;merge beta&quot;</span><span class="comment"># 此处不能加文件名，否则报错</span></span></span><br></pre></td></tr></table></figure></li></ol><hr><h1 id="-4"><a href="#-4" class="headerlink" title=""></a><p class='p cyan huge center'>团队协作机制<sup>(5)</sup></p></h1><h2 id="团队内协作-5-1"><a href="#团队内协作-5-1" class="headerlink" title="团队内协作(5.1)"></a>团队内协作<sup>(5.1)</sup></h2><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/d71ae461e980d9246d92f1afce6f148f.jpeg" alt="d71ae461e980d9246d92f1afce6f148f"></p><h2 id="跨团队协作-5-2"><a href="#跨团队协作-5-2" class="headerlink" title="跨团队协作(5.2)"></a>跨团队协作<sup>(5.2)</sup></h2><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/image-20230105101336437.png" alt="image-20230105101336437"></p><hr><h1 id="-5"><a href="#-5" class="headerlink" title=""></a><p class='p cyan huge center'>GitHub<sup>(6)</sup></p></h1><div class="tip home"><p><strong>Github官网</strong>：<a href="https://github.com">https://github.com</a></p></div><h2 id="-6"><a href="#-6" class="headerlink" title=""></a><p class='p blue large left'>网页操作<sup>(6.1)</sup></p></h2><h3 id="创建仓库-6-1-1"><a href="#创建仓库-6-1-1" class="headerlink" title="创建仓库(6.1.1)"></a>创建仓库<sup>(6.1.1)</sup></h3><p>注册成功登陆后，点击 <code>create repository</code></p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/24a342741a1b4f4482ba0cfb155f1eca.png" alt="在这里插入图片描述"></p><p>根据提示进行填写，这里是记录自己第一次使用，选择私人仓库。</p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/d277aa337d414b6f8948e5b2bf9391e9.png" alt="在这里插入图片描述"></p><p>创建成功，就进入了仓库主页</p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/39d86423610a40dab383c533494748f1.png" alt="在这里插入图片描述"></p><h3 id="仓库管理-6-1-2"><a href="#仓库管理-6-1-2" class="headerlink" title="仓库管理(6.1.2)"></a>仓库管理<sup>(6.1.2)</sup></h3><p>新建文件</p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/8e5e22bdf40b4845ac4a5fb9a0c2081c.png" alt="在这里插入图片描述"></p><p>进入新建文件页面</p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/0bf6425e165e420897adb1ab7e935742.png" alt="在这里插入图片描述"></p><p>然后来看一下preview</p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/f73502458f3d444da2031bb6f7d00a2d.png" alt="在这里插入图片描述"></p><p>创建之后，会自动跳转到仓库主页</p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/f7061261bcef4c5086e7425850ab3fab.png" alt="在这里插入图片描述"></p><p>然后，我这里选择点击文件名python1，进入新的页面</p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/3af8a765171a4d28a727325454a29755.png" alt="在这里插入图片描述"></p><p>点击编辑（🖊），进入编辑页面</p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/67324c2c51c74406a391e0415badad4f.png" alt="在这里插入图片描述"></p><p>成功提交之后，会返回刚刚的页面</p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/cafa110cabe54617b6a26ba5cdc3c7fd.png" alt="在这里插入图片描述"></p><p>这里选择点击仓库名python_test，返回仓库主页，再点击发生变化的描述，查看提交的详细情况</p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/a5b83bb6ac824a9f9668c02b02d47820.png" alt="在这里插入图片描述"></p><p>在仓库主页，点击commits，可以查看历史提交版本</p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/e1eabd7d2b4248e18d1eca6852aea19c.png" alt="在这里插入图片描述"></p><h3 id="上传文件-6-1-3"><a href="#上传文件-6-1-3" class="headerlink" title="上传文件(6.1.3)"></a>上传文件<sup>(6.1.3)</sup></h3><p>在仓库主页进行以下操作</p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/ee24021b7f6e46ce92bbd92f3068c9f7.png" alt="在这里插入图片描述"></p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/4568eca8ba544d088e23a1e69e607883.png" alt="在这里插入图片描述"></p><p>上传成功之后，会自动返回仓库主页</p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/3460e1bde26c44dc848718ce3dd7d3e3.png" alt="在这里插入图片描述"></p><p>在仓库主页，还可以搜索文件，根据文件名进行搜索</p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/454530d42d4f4aa3b0dbb03376447816.png" alt="在这里插入图片描述"></p><h3 id="关注、收藏、克隆、issues-6-1-4"><a href="#关注、收藏、克隆、issues-6-1-4" class="headerlink" title="关注、收藏、克隆、issues(6.1.4)"></a>关注、收藏、克隆、issues<sup>(6.1.4)</sup></h3><p>​    关注：关注之后，作者仓库发生变化，你会收到提示信息；</p><p>​    收藏：收藏仓库，方便查找；</p><p>​    克隆（复制）：创建一个和作者仓库一样的仓库，不会动态变化，即作者之后更新的内容，你的仓库不会发生变化；</p><p>​    发送请求：如果你克隆了一个作者的仓库，还想和作者同步，那么可以选择发送请求。</p><p>​    issues：用于发现bug，讨论使用，也可以理解为私信</p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/a9405f9ec943465380ee7e519b9acd9b.png" alt="在这里插入图片描述"></p><p>进行以下步骤，查看自己的收藏</p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/dd7f61b10a494fdf899a946309520003.png" alt="在这里插入图片描述"></p><h2 id="-7"><a href="#-7" class="headerlink" title=""></a><p class='p blue large left'>远程库操作<sup>(6.2)</sup></p></h2><h3 id="创建远程仓库别名-6-2-1"><a href="#创建远程仓库别名-6-2-1" class="headerlink" title="创建远程仓库别名(6.2.1)"></a>创建远程仓库别名<sup>(6.2.1)</sup></h3><p>建议别名与仓库名保持一致</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote -v<span class="comment"># 查看当前所有远程地址别名</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote add 别名 远程地址<span class="comment"># 给此远程仓库取别名，方便操作</span></span></span><br></pre></td></tr></table></figure><h3 id="推送本地分支到远程仓库-6-2-2"><a href="#推送本地分支到远程仓库-6-2-2" class="headerlink" title="推送本地分支到远程仓库(6.2.2)"></a>推送本地分支到远程仓库<sup>(6.2.2)</sup></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git push 别名(或远程库地址) 本地分支<span class="comment"># 推送本地分支上的内容到远程仓库</span></span></span><br></pre></td></tr></table></figure><p>如果首次登入过会弹出登入账号或其他选项，按照实际情况操作。（Windows下可以查看凭据管理器）</p><h3 id="克隆远程仓库到本地-6-2-2"><a href="#克隆远程仓库到本地-6-2-2" class="headerlink" title="克隆远程仓库到本地(6.2.2)"></a>克隆远程仓库到本地<sup>(6.2.2)</sup></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git <span class="built_in">clone</span> 远程库地址<span class="comment"># 克隆远程仓库内容到本地</span></span></span><br></pre></td></tr></table></figure><p>克隆会做如下操作：1. 拉取代码 2. 初始化本地库 3. 自动创建别名</p><h3 id="拉取远程库内容-6-2-3"><a href="#拉取远程库内容-6-2-3" class="headerlink" title="拉取远程库内容(6.2.3)"></a>拉取远程库内容<sup>(6.2.3)</sup></h3><p>要注意切换到需要拉取的本地库分支上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git pull 别名(或远程库地址) 远程分支名<span class="comment"># 将远程仓库对于分支最新内容拉下来后与当前本地分支直接合并</span></span></span><br></pre></td></tr></table></figure><h2 id="-8"><a href="#-8" class="headerlink" title=""></a><p class='p blue large left'>团队协作<sup>(6.3)</sup></p></h2><h3 id="团队内协作-6-3-1"><a href="#团队内协作-6-3-1" class="headerlink" title="团队内协作(6.3.1)"></a>团队内协作<sup>(6.3.1)</sup></h3><h4 id="邀请-6-3-1-1"><a href="#邀请-6-3-1-1" class="headerlink" title="邀请(6.3.1.1)"></a>邀请<sup>(6.3.1.1)</sup></h4><ol><li><p>选择邀请合作者</p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/2726f1402ef34d909df1ea69b84831bc.png" alt="img"></p></li><li><p>填入想要合作的人</p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/07e62400d97c4e1c98f2ef300ffddb6f.png" alt="img"></p></li><li><p>复制地址并发送给该用户</p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/31a3b825f9fe40ba8fd4416fca714315.png" alt="img"></p></li></ol><h4 id="加入团队-6-3-1-2"><a href="#加入团队-6-3-1-2" class="headerlink" title="加入团队(6.3.1.2)"></a>加入团队<sup>(6.3.1.2)</sup></h4><ol><li><p>在linghuchong258这个账号中的地址栏复制收到邀请的链接，点击接受邀请</p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/075d5a861c9a4572a82042a6e80746f7.png" alt="img"></p></li><li><p>成功加入团队</p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/f6b71feb9a784800886eb87d539c5f9c.png" alt="img"></p></li></ol><h3 id="跨团队协作-6-3-2"><a href="#跨团队协作-6-3-2" class="headerlink" title="跨团队协作(6.3.2)"></a>跨团队协作<sup>(6.3.2)</sup></h3><h4 id="非团队成员操作-6-3-2-1"><a href="#非团队成员操作-6-3-2-1" class="headerlink" title="非团队成员操作(6.3.2.1)"></a>非团队成员操作<sup>(6.3.2.1)</sup></h4><ol><li><p>搜索项目(项目需要是public的，否则搜不到)</p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/a4f81e7bdce94a0ca50490ba14fcbf3b.png" alt="在这里插入图片描述"></p></li><li><p>Fork创造副本</p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/95aa6e3fef6b40f3ad6619c9ad1915ac.png" alt="在这里插入图片描述"></p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/cd764c5516984cc496579f5f8bff6f35.png" alt="在这里插入图片描述"></p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/e3de26a8ed694a1caf1c0380df236d37.png" alt="在这里插入图片描述"></p></li><li><p>修改内容,这里直接在修改一些内容，当然也可以<code>git clone</code>到本地，再执行<code>add</code>,<code>commit</code>,<code>push</code>等操作来修改。</p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/f51a7a1eb49e4f19928b68f54cd1c379.png" alt="在这里插入图片描述"></p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/0028c4b076e34be088baedb9e7695cce.png" alt="在这里插入图片描述"></p></li><li><p>创建拉取请求（就是提交）</p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/55b5730eb2684c5e9c1ccf39e6ef2f52.png" alt="在这里插入图片描述"></p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/00246e281fd545f4b0a9b1b0c33a897e.png" alt="在这里插入图片描述"></p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/bbef840148074c3b9583e195678523c1.png" alt="在这里插入图片描述"></p></li></ol><h4 id="库原作者操作-6-3-2-2"><a href="#库原作者操作-6-3-2-2" class="headerlink" title="库原作者操作(6.3.2.2)"></a>库原作者操作<sup>(6.3.2.2)</sup></h4><ol><li><p>查看合并请求</p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/531a47b76f994f09bbfa41b8fdd5d429.png" alt="在这里插入图片描述"></p></li><li><p>点击查看合并请求，点击merge pull request进行合并</p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/d4d9b19b08ad41c7b61f1c5cf7519eca.png" alt="在这里插入图片描述"></p><p>当然原作者如果有疑问，也可以向团队外的修改者进行交流，消息发送后，对方会实时收到。</p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/2f078a2cf84d46ca9e668e115bcc1e8f.png" alt="在这里插入图片描述"></p><p><img src="https://img-blog.csdnimg.cn/29978e77b4fb4449b53cc82a75efe518.png?x-oss-process=image/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBA6YCG5rC06KGM6Iif5rKh5pyJ6YCA6Lev,size_16,color_FFFFFF,t_70,g_se,x_16" alt="在这里插入图片描述"></p><ol><li><p>执行合并操作，原作者的仓库就会修改</p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/30c31d87f9174b96b5067358ad87035b.png" alt="在这里插入图片描述"></p></li></ol></li></ol><h2 id="-9"><a href="#-9" class="headerlink" title=""></a><p class='p blue large left'>SSH 免密登录<sup>(6.4)</sup></p></h2><h3 id="Linux-6-4-1"><a href="#Linux-6-4-1" class="headerlink" title="Linux(6.4.1)"></a>Linux<sup>(6.4.1)</sup></h3><p>想要从 Linux 命令行clone github仓库的话，目前不支持 HTTPS 的方式了。那么不想使用 Github CLI 的话，就必须配置 SSH 连接了。</p><ol><li><p>生成SSH密钥</p><p>在<code>~/.ssh</code>下生成一个私钥id_rsa，和一个公钥id_rsa.pub。</p><p>生成过程中会询问是否设置passphrase，这就相当于保护这个私钥的密码，避免被破译。</p><p>安全起见，建议设置密码。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ6we7h05pt11jdb989dawZ ~]# ssh-keygen -t rsa</span><br></pre></td></tr></table></figure></li><li><p>配置 Github</p><p>① 复制公钥文件的内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ6we7h05pt11jdb989dawZ ~]# cat ~/.ssh/id_rsa.pub</span><br></pre></td></tr></table></figure><p>② <code>Github</code>中，打开 <code>Settings</code> &gt; <code>SSH and GPG keys</code> &gt; <code>New SSH key</code></p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/image-20230105220227246.png" alt="image-20230105220227246"></p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/image-20230105220618037.png" alt="image-20230105220618037"></p></li></ol><p>​        <img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/image-20230105221432918.png" alt="image-20230105221432918"></p><p>​        ③ 在 Key 文本框中粘贴上复制好的公钥内容，并且设置好 Title 后，点击 Add SSH key</p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/image-20230105221550696.png" alt="image-20230105221550696"></p><ol><li><p>检查 SSH 链接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ6we7h05pt11jdb989dawZ ~]# ssh -T git@github.com</span><br><span class="line">Enter passphrase for key &#x27;pass/to/private/key&#x27;: </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果收到下面的提示，则表示设置成功。</span></span><br><span class="line">Hi xxxx! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">否则，可能会看到这样的提示</span></span><br><span class="line">Permission denied (publickey).</span><br></pre></td></tr></table></figure><p>如果除了permission denied以外，还出现了：sign_and_send_pubkey: signing failed: agent refused operation的报错提示，有两种解决方法：</p><ul><li><p>ssh文件夹由于手动创建的原因权限不足。运行下面这行代码即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@iZ6we7h05pt11jdb989dawZ ~]# chmod 700 ~/.ssh &amp;&amp; chmod 600 ~/.ssh/*</span><br></pre></td></tr></table></figure></li><li><p>密钥没有被添加到缓存中。运行<code>ssh-add</code>来添加，随后运行<code>ssh-add -l</code>来检测是否添加成功.</p></li></ul></li></ol><h3 id="Windows-6-4-2"><a href="#Windows-6-4-2" class="headerlink" title="Windows(6.4.2)"></a>Windows<sup>(6.4.2)</sup></h3><p>在<code>C:\Users\当前用户</code>呼出命令提示符</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C xxx@qq.com# -C表示添加描述：邮箱为...</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">连续三次回车，会在C:\Users\当前用户\.ssh\生成.pub公钥</span></span><br></pre></td></tr></table></figure><p>其他同Linux相同。</p><hr><h1 id="-10"><a href="#-10" class="headerlink" title=""></a><p class='p cyan huge center'>IDEA集成Git<sup>(7)</sup></p></h1><h2 id="配置Git忽略文件-7-1"><a href="#配置Git忽略文件-7-1" class="headerlink" title="配置Git忽略文件(7.1)"></a>配置Git忽略文件<sup>(7.1)</sup></h2><p>与项目的实际功能无关，不参与服务器上部署运行。把它们忽略掉能够屏蔽IDE工具之间的差异。</p><h3 id="MacOS-7-1-1"><a href="#MacOS-7-1-1" class="headerlink" title="MacOS(7.1.1)"></a>MacOS<sup>(7.1.1)</sup></h3><h3 id="Windows-7-1-2"><a href="#Windows-7-1-2" class="headerlink" title="Windows(7.1.2)"></a>Windows<sup>(7.1.2)</sup></h3><ol><li><p>创建忽略规则文件 $\textcolor{red}{xxx.ignore （前缀名随便起，建议是git.ignore）}$</p><p>这个文件放置在哪里都可以，为了便于让<code>~/.gitconfig</code>文件引用，建议也放在用户家目录下</p><p>（idea一般会自动生成）</p></li><li><p>在<code>~/.gitconfig</code>中添加</p><p>注意：Windows下要使用斜线 <code>/</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[core]</span><br><span class="line">excludesfile = C:/Users/用户/git.ignore</span><br></pre></td></tr></table></figure></li></ol><h2 id="配置IDEA-7-2"><a href="#配置IDEA-7-2" class="headerlink" title="配置IDEA(7.2)"></a>配置IDEA<sup>(7.2)</sup></h2><ol><li><p>打开 <code>File</code> &gt; <code>Settings</code></p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/image-20230105230001768.png" alt="image-20230105230001768"></p></li><li><p><code>Version Control</code> &gt;  <code>Git</code>(或直接搜索git)</p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/image-20230105230044402.png" alt="image-20230105230044402"></p></li><li><p>配置git.exe的安装目录，点击<code>Test</code>出现版本号证明成功，点<code>OK</code></p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/image-20230105230126332.png" alt="image-20230105230126332"></p></li></ol><h2 id="初始化IDEA本地库-7-3"><a href="#初始化IDEA本地库-7-3" class="headerlink" title="初始化IDEA本地库(7.3)"></a>初始化IDEA本地库<sup>(7.3)</sup></h2><ol><li><p>VCS &gt; Create Git Repository..</p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/image-20230106001012899.png" alt="image-20230106001012899"></p><p><img src="https://gitee.com/niiuu/images/raw/master/article_images/typora_images/image-20230106001111394.png" alt="image-20230106001111394"></p></li></ol>]]></content>
    
    
    <summary type="html">Git 是一个开源的分布式版本控制系统，可以有效、高速地处理从很小到非常大的项目版本管理。</summary>
    
    
    
    <category term="Notes" scheme="https://aceniu.github.io/categories/Notes/"/>
    
    
    <category term="编程" scheme="https://aceniu.github.io/tags/%E7%BC%96%E7%A8%8B/"/>
    
    <category term="git" scheme="https://aceniu.github.io/tags/git/"/>
    
  </entry>
  
</feed>
